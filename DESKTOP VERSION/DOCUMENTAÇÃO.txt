# Finanza Desktop – Documentação Completa

## 1. Visão Geral

O **Finanza Desktop** é um sistema de controle financeiro pessoal e empresarial, desenvolvido em Java (NetBeans), com arquitetura cliente-servidor. O servidor gerencia dados, autenticação e comunicação via sockets, enquanto o cliente oferece interface gráfica completa, seguindo o padrão MVC. O banco de dados relacional é gerenciado via HeidiSQL (MySQL).

Inspirado na versão Android, o desktop mantém usabilidade, organização e funcionalidades similares, adaptando para ambiente desktop e modelo centralizado.

---

## 2. Estrutura do Sistema

- **Servidor (Java):**
  - Gerencia conexões de clientes via sockets
  - Controla autenticação, CRUD de usuários, contas, categorias, movimentações
  - Integra com banco de dados MySQL

- **Cliente (Java, GUI):**
  - Interface gráfica (Swing ou JavaFX)
  - Fluxo de cadastro, login, dashboard, movimentações, contas, categorias, perfil, relatórios, exportação
  - Comunica-se com o servidor via sockets
  - Modelo MVC para separação e manutenção

---

## 3. Funcionalidades Principais

### 3.1 Cadastro e Login
- Tela inicial oferece opção para criar nova conta ou realizar login
- Validação de dados, senha segura (hash)
- Após login, acesso ao dashboard principal

### 3.2 Dashboard (Home)
- Exibe saldo atual consolidado
- Totais de receitas e despesas do mês
- Gráfico (pizza ou barras) de gastos por categoria
- Lista das últimas transações realizadas
- Botão/menu para acessar outras áreas do sistema

### 3.3 Movimentações Financeiras
- Visualização de todas as movimentações do mês selecionado
- Filtro por mês/ano
- Saldo do mês exibido
- Adicionar nova movimentação (formulário: valor, conta, categoria, data, descrição, tipo)
- Editar/excluir movimentações existentes

### 3.4 Gerenciamento de Contas
- Listagem das contas cadastradas (corrente, poupança, cartão, etc.)
- Adicionar nova conta
- Editar/excluir contas

### 3.5 Categorias
- Listagem de categorias (receita/despesa)
- Criar, editar, excluir categorias
- Definir tipo da categoria (Receita ou Despesa)
- Relacionar movimentações às categorias

### 3.6 Perfil do Usuário
- Exibir informações da conta
- Alterar senha autenticada
- Logout

### 3.7 Relatórios Financeiros
- Relatórios por período, categoria, conta
- Gráficos e tabelas exportáveis
- Resumo financeiro anual/mensal

### 3.8 Exportação de Dados
- Exportar movimentações, contas, categorias em CSV, Excel ou PDF
- Definir período e filtros antes de exportar

### 3.9 Sincronização e Multiusuário
- Vários clientes desktop podem se conectar simultaneamente ao mesmo servidor
- Dados centralizados e sincronizados

---

## 4. Fluxo do Usuário

1. **Abertura do aplicativo:** Tela de login/cadastro
2. **Login realizado:** Redirecionado ao dashboard
3. **Navegação pelo menu:** Acesso às páginas de movimentações, contas, categorias, perfil, relatórios, exportação
4. **Operações CRUD:** Adicionar, editar, excluir registros conforme permissões
5. **Logout:** Encerra sessão e retorna à tela inicial

---

## 5. Modelo de Dados (Diagrama ER Simplificado)

- **Usuario**
  - id, nome, email, senha_hash
- **Conta**
  - id, nome, tipo, id_usuario
- **Categoria**
  - id, nome, tipo, id_usuario
- **Movimentacao**
  - id, valor, data, descricao, id_conta, id_categoria, id_usuario

Relacionamentos:
- Usuario 1:N Conta
- Usuario 1:N Categoria
- Usuario 1:N Movimentacao
- Conta 1:N Movimentacao
- Categoria 1:N Movimentacao

---

## 6. Estrutura de Diretórios

```plaintext
Finanza/
├── ClienteFinanza/
│   ├── controller/
│   ├── model/
│   ├── view/
│   ├── util/
│   └── MainCliente.java
├── ServidorFinanza/
│   ├── controller/
│   ├── model/
│   ├── dao/
│   ├── server/
│   ├── util/
│   └── MainServidor.java
├── docs/
│   ├── DOCUMENTACAO.md
│   ├── DiagramaER.png
│   └── README.md
└── banco/
    └── script_inicial.sql
```

---

## 7. Padrão de Comunicação Cliente-Servidor

- Cliente envia requisições ao servidor via sockets (JSON ou protocolo customizado)
- Servidor processa, acessa o banco, retorna resposta ao cliente
- Operações: login, cadastro, CRUD de contas/categorias/movimentações, consulta, exportação

---

## 8. Padrão MVC (Cliente)

- **Model:** Representação dos dados e regras de negócio (Usuario, Conta, Categoria, Movimentacao)
- **View:** Telas, formulários, gráficos, listas, tabelas
- **Controller:** Lógica de interação entre usuário, view e model; manipulação de eventos, requisições ao servidor

---

## 9. Segurança

- Senhas armazenadas como hash
- Validação de dados nas duas pontas
- Sessão autenticada, expiração automática
- Comunicação segura (preferencialmente SSL/TLS em produção)

---

## 10. Requisitos Técnicos

- Java 8+ (NetBeans)
- MySQL (HeidiSQL)
- Swing ou JavaFX para GUI
- Sockets TCP/IP
- Estrutura modular e escalável

---

## 11. Referências

- [Repositório Android](https://github.com/KallebySchultz/Finanza) – Experiência de usuário, organização, funcionalidades
- Documentação de Engenharia de Software (modelagem, requisitos, diagramas UML/ER)

---

## 12. Roadmap de Desenvolvimento

1. Modelagem do banco de dados (Diagrama ER)
2. Implementação do servidor (autenticação, CRUD, sockets)
3. Estruturação do cliente MVC e tela de login/cadastro
4. Telas principais (Home, Movimentações, Contas, Categorias)
5. Relatórios, exportação, perfil
6. Testes, documentação final

---

## 13. Screenshots & Diagramas

- [ ] Incluir diagramas ER e UML
- [ ] Exemplos de telas (wireframes)

---

## 14. Observações

A interface desktop deve seguir o padrão visual e de navegação do app Android, promovendo transição fácil para usuários já acostumados com o mobile. Todas as operações de cadastro, consulta e relatórios devem ser simples, intuitivas e rápidas.

---
